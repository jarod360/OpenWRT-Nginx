name: Build OpenWrt1

on:
  repository_dispatch:
  workflow_dispatch:


env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DIY_SH: diy.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: OpenWRT-Docker~Nginx版


jobs:
  build:
    runs-on: ubuntu-22.04
    steps:  
    - name: Checkout
      uses: actions/checkout@main
    - name: 搭建编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get -yqq purge $(curl -fsSL https://raw.githubusercontent.com/binge8/ybin/master/bin/del) || true
        sudo -E apt-get -qq update
        sudo -E apt-get -yqq install $(curl -fsSL https://raw.githubusercontent.com/binge8/ybin/master/bin/get-apt)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
    - name: 克隆源代码
      run: |
        df -hT $PWD
        sleep 2m
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    - name: 缓存
      id: cache
      uses: stupidloud/cachewrtbuild@main
      with:
        skip_saving: 'true'
        ccache: 'true'
        mixkey: "${{ env.FILENAME }}"
        prefix: ${{ github.workspace }}/openwrt
    - name: 自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH
        cat package/lean/default-settings/files/zzz-default-settings
        useVersionInfo=$(git show -s --date=short --format="编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录:<br/>更新人: %an<br/>更新时间: %cd<br/>更新内容: %s<br/>哈希值: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d-%H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y.%m.%d")" >> $GITHUB_ENV
    - name: 下载软件包
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: 编译
      run: |
        cd openwrt
        echo -e "$nproc thread compile"
        make -j$[`nproc`+1] || make -j1 V=s
        echo "compile=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV  
    - name: 整理编译文件
      if: env.compile == 'success'
      run: |
        bin1=openwrt/bin/targets/x86/64
        mkdir -p bin2 && cp -r $bin1/* bin2
        rm -rf $bin1/*.gz bin2/packages
        tar -zcvf bin.tar.gz openwrt/bin
        cp bin.tar.gz bin2
        echo "organize=success" >> $GITHUB_ENV
    - name: 生成标签
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "RELEASE_TAG=$(TZ=UTC-8 date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
    - name: 发布release
      if: env.UPLOAD_RELEASE == 'true' && env.organize == 'success'
      uses: ncipollo/release-action@main
      with:
        name: OpenWRT-Nginx 🚀 | 自动编译 / ${{ env.DATE1 }}
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.RELEASE_TAG }}
        commit: master
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          1、本固件内置Web服务由uhttpd更换为nginx，支持反向代理。
          2、本固件ttyd支持ssl单向认证连接，luci界面支持设置。
          3、本固件内含sub-web和subconverter，支持订阅转换。
          4、本固件默认IP 192.168.0.250，密码为空。
          5、本固件内含docker及科学上网等插件。
          ${{ env.useVersionInfo }}
        artifacts: bin2/*
    - name: 删除工作流记录
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        retain_days: 1
        keep_minimum_runs: 3
    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@v0.2.1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
